usage %>% transmute(., usage) %>%
distinct() %>%
group_by(color) %>%
summarise(total=sum(usage))
usage %>% transmute(., usage) %>%
distinct() %>%
group_by(usage) %>%
summarise(total=sum(usage))
usage %>% transmute(., usage) %>%
distinct() %>%
summarise(total=sum(usage))
usage %>% transmute(., usage) %>%
distinct() %>%
summarise(total=n())
usage %>% transmute(., usage) %>%
distinct()
usage
usage %>% summarise(length(unique(usage)))
usage %>% summarise(length(unique(type)))
usage = data %>% select(., type=Is.Python.the.main.language.you.use.for.your.current.projects.)
usage %>% summarise(length(unique(type)))
usage %>% summarise(n_distinct(type))
usage %>% group_by(., type) %>% summarise(n_distinct(type))
usage %>% group_by(., type) %>% summarise(length(type))
usage %>% group_by(., type) %>% summarise(count = length(type))
usage = usage %>% group_by(., type) %>% summarise(count = length(type))
runApp('pythonSurvey2017')
usage = data %>% select(., type=Is.Python.the.main.language.you.use.for.your.current.projects.)
usage = usage %>% mutate(type = ifelse(type == No, I don?€?t use Python for my current projects, type = "No, I don't use Python for my current projects", type))
usage = usage %>% group_by(., type) %>% summarise(count = length(type))
runApp('pythonSurvey2017')
runApp('pythonSurvey2017')
runApp('pythonSurvey2017')
runApp()
runApp('pythonSurvey2017')
runApp('pythonSurvey2017')
runApp('pythonSurvey2017')
runApp('pythonSurvey2017')
usage = data %>% select(., type=Is.Python.the.main.language.you.use.for.your.current.projects.)
usage = usage %>% mutate(., type = ifelse(type == "No, I don?€?t use Python for my current projects", type = "No", type))
usage = usage %>% mutate(., type = ifelse(type == No, I don?€?t use Python for my current projects, type = "No", type))
View(usage)
runApp('pythonSurvey2017')
usage = usage %>% mutate(., type = ifelse(type == No, I donâ€™t use Python for my current projects, type = 1, type))
usage = usage %>% mutate(., type = ifelse(type == "No, I donâ€™t use Python for my current projects", type = 1, type))
usage = usage %>% mutate(., type = ifelse(type == "No, I donâ€™t use Python for my current projects", type = 1, type))
usage = usage %>% mutate(., type = ifelse(type == "No, I donâ€™t use Python for my current projects", type = "Yes", type))
usage = usage %>% transmute(., type = ifelse(type == "No, I donâ€™t use Python for my current projects", type = "Yes", type))
usage = usage %>% transmute(., type = ifelse(type == "No, I donâ€™t use Python for my current projects", type = "No", type))
runApp('pythonSurvey2017')
usage = usage %>% transmute(., result = ifelse(type == "No, I donâ€™t use Python for my current projects", type = "No", type))
usage = usage %>% transmute(., result = ifelse(type == "No, I donâ€™t use Python for my current projects", result = "No", type))
usage = usage %>% mutate(., result = ifelse(type == "No, I donâ€™t use Python for my current projects", result = "No", result = type))
usage = usage %>% mutate(., result = ifelse(type == "No, I donâ€™t use Python for my current projects", result = "No", result = type))
flights <- read.csv(file = "./data/flights14.csv")
data = read.csv('./data/pythondevsurvey2017_raw_data.csv', header=TRUE)
colnames(data)
View(usage)
data = read.csv('./data/pythondevsurvey2017_raw_data.csv', header=TRUE)
colnames(data)
usage = data %>% select(., type=Is.Python.the.main.language.you.use.for.your.current.projects.)
View(usage)
data = read.csv('./data/pythondevsurvey2017_raw_data.csv', header=TRUE)
usage = data %>% select(., type=Is.Python.the.main.language.you.use.for.your.current.projects.)
data = read.csv('./data/pythondevsurvey2017_raw_data.csv', header=TRUE)
data = read.csv('./data/pythondevsurvey2017_raw_data.csv', header=TRUE)
data = read.csv('./data/pythondevsurvey2017_raw_data.csv', header=TRUE)
flights <- read.csv(file = "./data/flights14.csv")
data = read.csv('./data/pythondevsurvey2017_raw_data.csv', header=TRUE)
flights <- read.csv(file = "./data/flights14.csv")
library(VIM) #For the visualization and imputation of missing values.
help(sleep) #Inspecting the mammal sleep dataset.
sleep
summary(sleep) #Summary information for the sleep dataset.
sapply(sleep, sd) #Standard deviations for the sleep dataset; any issues?
VIM::aggr(sleep) #A graphical interpretation of the missing values and their
#combinations within the dataset.
library(mice) #Load the multivariate imputation by chained equations library.
dim(sleep)
sum(is.na(sleep))
?md.pattern
mice::md.pattern(sleep) #Can also view this information from a data perspective.
##################################
#####Visualizing Missing Data#####
##################################
library(VIM) #For the visualization and imputation of missing values.
##########################################################
##########################################################
#####[02] Missingness, Imputation, & KNN Lecture Code#####
##########################################################
##########################################################
##################################
#####Visualizing Missing Data#####
##################################
install.packages('VIM')
library(VIM) #For the visualization and imputation of missing values.
help(sleep) #Inspecting the mammal sleep dataset.
sleep
summary(sleep) #Summary information for the sleep dataset.
sapply(sleep, sd) #Standard deviations for the sleep dataset; any issues?
VIM::aggr(sleep) #A graphical interpretation of the missing values and their
#combinations within the dataset.
library(mice) #Load the multivariate imputation by chained equations library.
dim(sleep)
sum(is.na(sleep))
?md.pattern
mice::md.pattern(sleep) #Can also view this information from a data perspective.
###############################
#####Mean Value Imputation#####
###############################
#Creating a dataset that has missing values.
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10)))
missing.data
mean(missing.data$x2, na.rm = TRUE) #Mean of x2 prior to imputation.
sd(missing.data$x2, na.rm = TRUE) #Standard deviation of x2 prior to imputation.
cor(missing.data, use = "complete.obs") #Correlation prior to imputation.
#Mean value imputation method 1.
missing.data$x2[is.na(missing.data$x2)] = mean(missing.data$x2, na.rm=TRUE)
missing.data
#Mean value imputation method 2.
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
missing.data = transform(missing.data, x2 = ifelse(is.na(x2),
mean(x2, na.rm=TRUE),
x2))
missing.data
#Mean value imputation method 3.
library(caret)
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
pre = caret::preProcess(missing.data, method = "medianImpute")
missing.data = predict(pre, missing.data)
missing.data
### Why Caret?
## 1. Maintain the structure of train - predict as other machine learning procedure.
##    This is particularly important when impute for future observation
## 2. Can be collected with other preprocesses, as below:
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
pre = preProcess(missing.data, method = c("scale", "medianImpute"))
missing.data = predict(pre, missing.data)
missing.data
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
pre = preProcess(missing.data, method = c("center","scale", "medianImpute"))
missing.data = predict(pre, missing.data)
missing.data
## manual scale
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
scaled = mapply(FUN = '/',missing.data,sapply(missing.data, function(x) {sd(x,na.rm=T)}))
scaled
### Caution
## 1. Caret doesn't impute categorical features
#Mean value imputation method 4.
library(Hmisc) #Load the Harrell miscellaneous library.
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
imputed.x2 = impute(missing.data$x2, mean) #Specifically calling the x2 variable.
imputed.x2
summary(imputed.x2) #Summary information for the imputed variable.
is.imputed(imputed.x2) #Boolean vector indicating imputed values.
missing.data$x2 = imputed.x2 #Replacing the old vector.
mean(missing.data$x2) #Mean of x2 after imputation.
sd(missing.data$x2) #Standard deviation of x2 after imputation.
cor(missing.data, use = "complete.obs") #Correlation afterto imputation.
plot(missing.data) #What are some potential problems with mean value imputation?
##################################
#####Simple Random Imputation#####
##################################
#Recreating a dataset that has missing values.
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10)))
missing.data
mean(missing.data$x2, na.rm = TRUE) #Mean of x2 prior to imputation.
sd(missing.data$x2, na.rm = TRUE) #Standard deviation of x2 prior to imputation.
cor(missing.data, use = "complete.obs") #Correlation prior to imputation.
set.seed(0)
imputed.x2 = impute(missing.data$x2, "random") #Simple random imputation using the
#impute() function from the Hmisc package.
imputed.x2
summary(imputed.x2) #Summary information for the imputed variable.
is.imputed(imputed.x2) #Boolean vector indicating imputed values.
missing.data$x2 = imputed.x2 #Replacing the old vector.
mean(missing.data$x2) #Mean of x2 after imputation.
sd(missing.data$x2) #Standard deviation of x2 after imputation.
cor(missing.data, use = "complete.obs") #Correlation afterto imputation.
plot(missing.data) #What are some potential problems with mean value imputation?
#############################
#####K-Nearest Neighbors#####
#############################
#Recreating a dataset that has missing values.
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10)))
missing.data
#Imputing using 1NN.
imputed.1nn = kNN(missing.data, k=1)
imputed.1nn
#Imputing using 5NN.
imputed.5nn = kNN(missing.data, k=5)
imputed.5nn
#Imputing using 9NN.
imputed.9nn = kNN(missing.data, k=9)
imputed.9nn
### Imputing with caret
### Note: knnImpute with caret::preProcess force normalization
#Imputing using 1NN.
pre.1nn = preProcess(missing.data, method = 'knnImpute', k=1)
imputed.1nn = predict(pre.1nn, missing.data)
#Imputing using 5NN.
pre.5nn = preProcess(missing.data, method = 'knnImpute', k=5)
imputed.5nn = predict(pre.5nn, missing.data)
#Imputing using 9NN.
pre.9nn = preProcess(missing.data, method = 'knnImpute', k=9)
imputed.9nn = predict(pre.9nn, missing.data)
imputed.1nn #Inspecting the imputed values of each of the methods;
imputed.5nn #what is going on here? Given our dataset, should we
imputed.9nn #expect these results?
#K-Nearest Neighbors regression on the sleep dataset.
sqrt(nrow(sleep)) #Determining K for the sleep dataset.
#Using 8 nearest neighbors.
pre.8nn = preProcess(sleep, method = 'knnImpute', k=8)
sleep.imputed8NN = predict(pre.8nn, sleep)
summary(sleep) #Summary information for the original sleep dataset.
summary(sleep.imputed8NN[, 1:10]) #Summary information for the imputed sleep dataset.
#K-Nearest Neighbors classification on the iris dataset.
help(iris) #Inspecting the iris measurement dataset.
iris
iris.example = iris[, c(1, 2, 5)] #For illustration purposes, pulling only the
#sepal measurements and the flower species.
#Throwing some small amount of noise on top of the data for illustration
#purposes; some observations are on top of each other.
set.seed(0)
iris.example$Sepal.Length = jitter(iris.example$Sepal.Length, factor = .5)
iris.example$Sepal.Width = jitter(iris.example$Sepal.Width, factor= .5)
col.vec = c(rep("red", 50), #Creating a color vector for plotting purposes.
rep("green", 50),
rep("blue", 50))
plot(iris.example$Sepal.Length, iris.example$Sepal.Width,
col = col.vec, pch = 16,
main = "Sepal Measurements of Iris Data")
legend("topleft", c("Setosa", "Versicolor", "Virginica"),
pch = 16, col = c("red", "green", "blue"), cex = .75)
missing.vector = c(41:50, 91:100, 141:150) #Inducing missing values on the Species
iris.example$Species[missing.vector] = NA  #vector for each category.
iris.example
col.vec[missing.vector] = "purple" #Creating a new color vector to
#mark the missing values.
plot(iris.example$Sepal.Length, iris.example$Sepal.Width,
col = col.vec, pch = 16,
main = "Sepal Measurements of Iris Data")
legend("topleft", c("Setosa", "Versicolor", "Virginica", "NA"),
pch = 16, col = c("red", "green", "blue", "purple"), cex = .75)
#Inspecting the Voronoi tesselation for the complete observations in the iris
#dataset.
library(deldir) #Load the Delaunay triangulation and Dirichelet tesselation library.
info = deldir(iris.example$Sepal.Length[-missing.vector],
iris.example$Sepal.Width[-missing.vector])
plot.tile.list(tile.list(info),
fillcol = col.vec[-missing.vector],
main = "Iris Voronoi Tessellation\nDecision Boundaries")
#Adding the observations that are missing species information.
points(iris.example$Sepal.Length[missing.vector],
iris.example$Sepal.Width[missing.vector],
pch = 16, col = "white")
points(iris.example$Sepal.Length[missing.vector],
iris.example$Sepal.Width[missing.vector],
pch = "?", cex = .66)
#Conducting a 1NN classification imputation.
iris.imputed1NN = kNN(iris.example, k = 1)
#Assessing the results by comparing to the truth known by the original dataset.
table(iris$Species, iris.imputed1NN$Species)
#Conducting a 12NN classification imputation based on the square root of n.
sqrt(nrow(iris.example))
iris.imputed12NN = kNN(iris.example, k = 12)
#Assessing the results by comparing to the truth known by the original dataset.
table(iris$Species, iris.imputed12NN$Species)
##################################################
#####Using Minkowski Distance Measures in KNN#####
##################################################
library(kknn) #Load the weighted knn library.
#Separating the complete and missing observations for use in the kknn() function.
complete = iris.example[-missing.vector, ]
missing = iris.example[missing.vector, -3]
#Distance corresponds to the Minkowski power.
iris.euclidean = kknn(Species ~ ., complete, missing, k = 12, distance = 2)
summary(iris.euclidean)
iris.manhattan = kknn(Species ~ ., complete, missing, k = 12, distance = 1)
summary(iris.manhattan)
##########################################################
##########################################################
#####[02] Missingness, Imputation, & KNN Lecture Code#####
##########################################################
##########################################################
##################################
#####Visualizing Missing Data#####
##################################
install.packages('VIM')
library(VIM) #For the visualization and imputation of missing values.
help(sleep) #Inspecting the mammal sleep dataset.
sleep
summary(sleep) #Summary information for the sleep dataset.
sapply(sleep, sd) #Standard deviations for the sleep dataset; any issues?
VIM::aggr(sleep) #A graphical interpretation of the missing values and their
#combinations within the dataset.
install.packages('mice')
install.packages("VIM")
#combinations within the dataset.
install.packages('mice')
library(mice) #Load the multivariate imputation by chained equations library.
dim(sleep)
sum(is.na(sleep))
?md.pattern
mice::md.pattern(sleep) #Can also view this information from a data perspective.
help(sleep) #Inspecting the mammal sleep dataset.
sleep
summary(sleep) #Summary information for the sleep dataset.
sapply(sleep, sd) #Standard deviations for the sleep dataset; any issues?
VIM::aggr(sleep) #A graphical interpretation of the missing values and their
##################################
#####Visualizing Missing Data#####
##################################
install.packages('VIM')
install.packages("VIM")
library(VIM) #For the visualization and imputation of missing values.
help(sleep) #Inspecting the mammal sleep dataset.
sleep
summary(sleep) #Summary information for the sleep dataset.
sapply(sleep, sd) #Standard deviations for the sleep dataset; any issues?
VIM::aggr(sleep) #A graphical interpretation of the missing values and their
#combinations within the dataset. red means missing value
install.packages('mice')
library(mice) #Load the multivariate imputation by chained equations library.
dim(sleep)
sum(is.na(sleep))
?md.pattern
mice::md.pattern(sleep) #Can also view this information from a data perspective.
###############################
#####Mean Value Imputation#####
###############################
#Creating a dataset that has missing values.
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10)))
missing.data
mean(missing.data$x2, na.rm = TRUE) #Mean of x2 prior to imputation.
sd(missing.data$x2, na.rm = TRUE) #Standard deviation of x2 prior to imputation.
cor(missing.data, use = "complete.obs") #Correlation prior to imputation.
#Mean value imputation method 1.
missing.data$x2[is.na(missing.data$x2)] = mean(missing.data$x2, na.rm=TRUE)
missing.data
#Mean value imputation method 2.
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
missing.data = transform(missing.data, x2 = ifelse(is.na(x2),
mean(x2, na.rm=TRUE),
x2))
missing.data
#Mean value imputation method 3.
library(caret)
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
pre = caret::preProcess(missing.data, method = "medianImpute")
#Mean value imputation method 3.
install.packages('caret')
library(caret)
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
pre = caret::preProcess(missing.data, method = "medianImpute")
missing.data = predict(pre, missing.data)
missing.data
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
pre = caret::preProcess(missing.data, method = "medianImpute")
missing.data = predict(pre, missing.data)
missing.data
### Why Caret?
## 1. Maintain the structure of train - predict as other machine learning procedure.
##    This is particularly important when impute for future observation
## 2. Can be collected with other preprocesses, as below:
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
pre = preProcess(missing.data, method = c("scale", "medianImpute"))
missing.data = predict(pre, missing.data) #use predict function to predict missing data according to pre
missing.data
### Why Caret?
## 1. Maintain the structure of train - predict as other machine learning procedure.
##    This is particularly important when impute for future observation
## 2. Can be collected with other preprocesses, as below:
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
pre = preProcess(missing.data, method = c("scale", "medianImpute"))
missing.data = predict(pre, missing.data) #use predict function to predict missing data according to pre
missing.data
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
pre = preProcess(missing.data, method = c("center","scale", "medianImpute"))
missing.data = predict(pre, missing.data)
missing.data
#Mean value imputation method 4.
library(Hmisc) #Load the Harrell miscellaneous library.
#Mean value imputation method 4.
install.packages('Hmisc')
library(Hmisc) #Load the Harrell miscellaneous library.
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
imputed.x2 = impute(missing.data$x2, mean) #Specifically calling the x2 variable.
imputed.x2
summary(imputed.x2) #Summary information for the imputed variable.
is.imputed(imputed.x2) #Boolean vector indicating imputed values.
missing.data$x2 = imputed.x2 #Replacing the old vector.
mean(missing.data$x2) #Mean of x2 after imputation.
sd(missing.data$x2) #Standard deviation of x2 after imputation.
cor(missing.data, use = "complete.obs") #Correlation afterto imputation.
plot(missing.data) #What are some potential problems with mean value imputation?
mean(missing.data$x2) #Mean of x2 after imputation.
sd(missing.data$x2) #Standard deviation of x2 after imputation.
cor(missing.data, use = "complete.obs") #Correlation afterto imputation.
plot(missing.data) #What are some potential problems with mean value imputation?
missing.data = data.frame(x1 = 1:20, x2 = c(1:10, rep(NA, 10))) #Recreating dataset.
imputed.x2 = impute(missing.data$x2, mean) #Specifically calling the x2 variable.
imputed.x2
summary(imputed.x2) #Summary information for the imputed variable.
is.imputed(imputed.x2) #Boolean vector indicating imputed values.
missing.data$x2 = imputed.x2 #Replacing the old vector.
mean(missing.data$x2) #Mean of x2 after imputation.
sd(missing.data$x2) #Standard deviation of x2 after imputation.
cor(missing.data, use = "complete.obs") #Correlation afterto imputation.
plot(missing.data) #What are some potential problems with mean value imputation?
data = read.csv('./data/vrbo.csv', header=TRUE)
setwd('vrbo_shiny')
data = read.csv('./data/vrbo.csv', header=TRUE)
smoking <- read.csv(".data/US.csv", header = TRUE)
smoking <- read.csv("./data/US.csv", header = TRUE)
states <- geojson_read("gz_2010_us_040_00_500k.json",what = "sp")
library(sp)
library(leaflet)
library(geojsonio)
install.packages('geojsonio')
library(geojsonio)
states <- geojson_read("gz_2010_us_040_00_500k.json",what = "sp")
states <- geojson_read("gz_2010_us_040_00_500k.json",what = "sp")
library(sp)
states
states <- geojson_read("gz_2010_us_040_00_500k.json",what = "sp")
states
# Merge data
# require(sp)! For spatial dataframe!
smoking.df <- merge(states, smoking, by.x = "NAME", by.y = "state")
states <- geojson_read(".data/gz_2010_us_040_00_500k.json",what = "sp")
states <- geojson_read("./data/gz_2010_us_040_00_500k.json",what = "sp")
states
# Merge data
# require(sp)! For spatial dataframe!
smoking.df <- merge(states, smoking, by.x = "NAME", by.y = "state")
smoking.df
data %>%
select  (price) %>%
group_by(., price) %>%
summarise(count = length(price)) %>%
arrange (., desc(count))
data %>%
select(state, city) %>%
group_by(., state, city) %>%
summarise(count = length(city)) %>%
arrange (., desc(count))
library(dplyr)
data %>%
select(state, city) %>%
group_by(., state, city) %>%
summarise(count = length(city)) %>%
arrange (., desc(count))
data %>%
select(state, city) %>%
group_by(., state, city) %>%
summarise(count = length(city)) %>%
require(datasets)
data %>%
select(state, city) %>%
group_by(., state, city) %>%
summarise(count = length(city))
stateData = data %>%
select(state, city) %>%
group_by(., state, city) %>%
summarise(count = length(city))
stateFull = read.csv("./data/states_abb.csv", header = TRUE)
View(smoking)
stateData.df <- merge(stateData, stateFull, by.x = "state", by.y = "abb")
stateData.df <- merge(stateData, stateFull, by.x = "state", by.y = "Abb")
stateData
View(stateData.df)
stateData.df1 <- merge(states, stateData.df, by.x = "NAME", by.y = "Name")
stateData = data %>%
select(state) %>%
group_by(., state) %>%
summarise(count = length(state))
stateFull = read.csv("./data/states_abb.csv", header = TRUE)
stateData.df <- merge(stateData, stateFull, by.x = "state", by.y = "Abb")
stateData.df1 <- merge(states, stateData.df, by.x = "NAME", by.y = "Name")
output$map <- renderLeaflet({
leaflet(stateData.df1) %>%
addProviderTiles(providers$Stamen.TonerLite) %>%
setView(lng = -98.583, lat = 39.833, zoom = 4) %>%
addPolygons(data = smoking.df ,fillColor = ~pal2(selectedYear()),
popup = paste0("<strong>State: </strong>",
smoking.df$NAME),
color = "#BDBDC3",
fillOpacity = 0.8,
weight = 1)
})
shiny::runApp()
install.packages("geojsonio")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
stateData = data %>%
select(state) %>%
group_by(., state) %>%
summarise(count = length(state))
abbtoFull = read.csv("./data/states_abb.csv", header = TRUE)
stateFull.df <- merge(stateData, abbtoFull, by.x = "state", by.y = "Abb")
states <- geojson_read("./data/gz_2010_us_040_00_500k.json",what = "sp")
stateData.df <- merge(states, stateFull.df, by.x = "NAME", by.y = "Name")
runApp()
runApp()
runApp()
runApp()
runApp()
